#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class MergeStrings {
public:
  string a, b, s;
  int n, m;
  int dp[51][51];
  bool solve(int i, int j){
    if(i > n || j > m)
      return false;
    if(i == n && j == m)
      return true;
    if(dp[i][j] != -1)
      return dp[i][j];

    int pos = i + j;
    bool sw1 = false, sw2 = false;
    if(s[pos] == '?'){
      sw1 = solve(i + 1, j);
      sw2 = solve(i, j + 1);
    }else{
      if(i < n && s[pos] == a[i])
        sw1 = solve(i + 1, j);
      if(j < m && s[pos] == b[j])
        sw2 = solve(i, j + 1);
    }
    return dp[i][j] = (sw1 || sw2);
  }
  string va;
  string answer(int i, int j){
    if(i > n || j > m)return va;
    if(i == n && j == m)
      return va;
    
    int pos = i + j;
    if(s[pos] == '?'){
      if(i < n && j < m && solve(i + 1, j) && solve(i, j + 1)){
        string x = answer(i + 1, j);
        string y = answer(i, j + 1);
        if(a[i] == b[j]){
          if(x < y)
            return va + a[i] + x;
          else
            return va + b[j] + y;
        } 
        if(a[i] < b[j])
          return va + a[i] + x;
        return va + b[j] + y;
      }
      if(i < n && solve(i + 1, j))
        return va + a[i] + answer(i + 1, j);

      if(j < m && solve(i, j + 1))
        return va + b[j] + answer(i, j + 1);
    }
    else{
      if(i < n && a[i] == s[pos] && solve(i +1, j) && j < m && b[j] == s[pos] && solve(i, j + 1)){
        string x = answer(i + 1, j);
        string y = answer(i, j + 1);
        if(x < y)
          return va + a[i] + x;
        else
          return va + b[j] + y;
      }
      if(i < n && a[i] == s[pos] && solve(i + 1, j))
        return va + a[i] + answer(i + 1, j);
      if(j < m && b[i] == s[pos] && solve(i, j + 1))
        return va + b[j] + answer(i, j + 1);
    }
    return "";
  }
  string getmin(string S, string A, string B) {
    va = "";
    a = A;
    b = B;
    s = S;
    n = a.size();
    m = b.size();
     memset(dp, -1, sizeof(dp));
     /*    bool sol = solve(0, 0);
    string ans = "";
    if(sol){
      int i = 0, j = 0;
      for(int pos = 0; pos < s.size(); pos++){
        if(s[pos] == '?'){
          if(i < n && j < n && solve(i + 1, j) && solve(i, j + 1)){
            if(a[i] < b[j])
              ans += a[i++];
            else
              ans += b[j++];
          }else{
            if(i < n && solve(i + 1, j))
              ans += a[i++];
            else
              ans += b[j++];
          }
        }else{
          if(i < n && s[pos] == a[i] && solve(i + 1, j))
            ans += a[i++];
          else
            ans += b[j++];
        }
      }        
      }*/
    return answer(0, 0);
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	MergeStrings *obj;
	string answer;
	obj = new MergeStrings();
	clock_t startTime = clock();
	answer = obj->getmin(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = "?" "?CC?" "?";
	p1 = "ABC";
	p2 = "BCC";
	p3 = "ABCCBC";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "WHAT?";
	p1 = "THE";
	p2 = "WA";
	p3 = "";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "PARROT";
	p1 = "PARROT";
	p2 = "";
	p3 = "PARROT";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p1 = "AZZAA";
	p2 = "AZAZZA";
	p3 = "AAZAZZAAZZA";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?D?" "?" "?K?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?K?" "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?";
	p1 = "KKKKKDKKKDKKDDKDDDKDKK";
	p2 = "KDKDDKKKDDKDDKKKDKDKKDDDDDDD";
	p3 = "KDKDKDKKKDDKDDKKKDKDKKDKDDDKDDDKKDKKKDKKDDKDDDKDKK";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
