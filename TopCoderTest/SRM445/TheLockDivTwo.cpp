#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class TheLockDivTwo {
public:
  string tobits(int n, int size){
    string ans = "";
    while(n){
      ans += ('0' + (n&1));
      n /= 2;
    }
    while(ans.size() < size)
      ans += '0';
    reverse(ans.begin(), ans.end());
    return ans;
  }
  int toint(string cad){
    int ans = 0;
    for(int i = 0; i < cad.size(); i++)
      ans += ((1<<i) * (cad[cad.size() - i - 1] - '0'));
    return ans;
  }
  int est(char a, char b){
    if(a == b)return 0;
    if(a == '0' && b == '1') return 1;
    return 2;
  }
  bool soncambio(string &a, string &b){
    int n = a.size();
    int estado = 0;
    for(int i = 0; i < n; i++){
      if(a[i] != b[i]){
        if(estado == 0) estado = est(a[i], b[i]);
        if(estado != est(a[i], b[i]))
          return false;
      }
    }
    return true;
  }
  string password(int n, int k) {
    string cad[(1<<n) + 5];
    for(int i = 0; i < (1 << n); i++)
      cad[i] = tobits(i, n);
    vector<string> g[(1<<n) + 5];
    for(int a = 0; a < (1 << n); a++)
      for(int b = a + 1; b < (1 << n); b++){
        if(soncambio(cad[a], cad[b])){
          g[a].push_back(cad[b]);
          g[b].push_back(cad[a]);
        }
      }
    for(int i = 0; i < (1<<n); i++)
      sort(g[i].begin(), g[i].end());
    bool v[(1<<n) + 5];
    memset(v, false, sizeof(v));
    int actual = 0;
    v[0] = true;
    for(int i = 0; i < k-1; i++){
      for(int j = 0; j < g[actual].size(); j++){
        if(!v[toint(g[actual][j])]){
          v[toint(g[actual][j])] = true;
          actual = toint(g[actual][j]);
          break;
        }
      }
    }
    return tobits(actual, n);
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheLockDivTwo *obj;
	string answer;
	obj = new TheLockDivTwo();
	clock_t startTime = clock();
	answer = obj->password(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 4;
	p2 = "10";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 6;
	p2 = "0100";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 1;
	p2 = "0000000000";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 100;
	p2 = "1100001";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
