#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define MAXN 1000000000LL
using namespace std;
typedef long long int Number;

class MyVeryLongCake {
public:
  bool isPrime(int n){
    if(n % 2 == 0)
      return n == 2;

    int div = 3;
    while(div * div <= n){
      if(n % div == 0)
        return false;
      div += 2;
    }
    return true;
  }
  vector<Number> primes;
  void generatePrimes(){
    primes.push_back(2);
    for(int i = 3; i <= 32000; i++)
      if(isPrime(i))
        primes.push_back(i);
  }
  vector<pair<Number, int> > factorize(Number n){
    int i = 0;
    map<Number, int> fac;
    while(primes[i] * primes[i] <= n){
      while(n % primes[i] == 0){
        fac[primes[i]]++;
        n /= primes[i];
      }
      i++;
    }
    if(n > 1)
      fac[n]++;
    return vector<pair<Number, int> >(fac.begin(), fac.end());
  }
  vector<pair<Number, int> > f;
  set<Number> d;
  int cant[200];
  int nnn;
  void generateDivisors(int i){

    if(i == f.size()){
      Number div = 1;
      for(int j = 0; j < f.size(); j++)
        div *= pow(f[j].first, cant[j]);
      if(div != nnn)
        d.insert(div);

      return;
    }
    for(int j = 0; j <= f[i].second; j++){
      cant[i] = j;
      generateDivisors(i + 1);
    }
  }
  int cut(int n) {
    generatePrimes();
    f = factorize(n);
    cout << "Factors" << endl;
    for(int i = 0; i < f.size(); i++)
      cout << f[i].first << "(" << f[i].second << "), ";
    cout << endl;
    nnn = n;
    generateDivisors(0);
    vector<Number> div(d.begin(), d.end());
    bool m[div.size()];
    memset(m, false, sizeof(m));
    Number ans = 0;
    cout << "divisors" << endl;
    for(int i = 0; i < div.size(); i++)
      cout << div[i] << ", ";
    cout << endl;
    for(int i = div.size() - 1; i >= 0; i--)
      for(int j = i - 1; j >= 0; j--)
        if(div[i] % div[j] == 0)
          m[j] = true;
    bool even = false;
    for(int i = 0; i < div.size(); i++)
      if(m[i] == false){
        if(div[i] % 2 == 0){
          if(even)
            ans += (div[i] - 2);
          else{
            ans += (div[i] - 1);
            even = true;
          }
        }else
          ans += (div[i] - 1);
      }
    return ans + 1;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	MyVeryLongCake *obj;
	int answer;
	obj = new MyVeryLongCake();
	clock_t startTime = clock();
	answer = obj->cut(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 6;
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 15;
	p1 = 7;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000000000;
	p1 = 600000000;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 577007436;
	p1 = 384671628;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
