#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;
#define MAX 1000000

class PrimeSequences {
public:
  bool cribe[MAX];
  vector<int> primes;
  void generatePrimes(){
    memset(cribe, false, sizeof(cribe));
    cribe[0] = cribe[1] = true;
    for(int i = 2; i * i < MAX; i++)
      if(cribe[i] == false)
        for(int j = i + i; j < MAX; j += i)
          cribe[j] = true;
    for(int i = 2; i < MAX; i++)
      if(cribe[i] == false)
        primes.push_back(i);
  }
  bool isPrime(int n){
    //if(n < MAX)
    return !cribe[n];
    /*    int i = 0;
    while(primes[i] * primes[i] <= n){
      if(n % primes[i] == 0)
        return false;
      i++;
    }
    return true;*/
  }
  int memo[MAX];
  int solve(int n){
    /*    if(n < MAX){  
      int & ans = memo[n];
      if(ans != -1) return ans;
      if(isPrime(n))
        return ans = 1 + solve(n >> 1);
      return ans = 0;
      }else{*/
      if(isPrime(n))
        return 1 + solve(n >> 1);
      //}
    return 0;
  }
  int getLargestGenerator(int N, int D) {
    generatePrimes();
    memset(memo, -1, sizeof(memo));
    for(int i = primes.size() - 1; i >= 0; i--)
      if(solve(primes[i]) >= D)
        return primes[i];
    return -1;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PrimeSequences *obj;
	int answer;
	obj = new PrimeSequences();
	clock_t startTime = clock();
	answer = obj->getLargestGenerator(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 2;
	p2 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 42;
	p1 = 3;
	p2 = 23;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 666;
	p1 = 7;
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1337;
	p1 = 5;
	p2 = 47;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100000;
	p1 = 5;
	p2 = 2879;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 10000000;
	p1 = 6;
	p2 = 4068479;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
