#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class Bingo {
public:
  int state[5][5];
  int mycard[5][5];
  string car ;
  int position(char c){
    for(int i = 0; i < car.size(); i++)
      if(car[i] == c)
        return i;
    return -1;
  }
  vector<vector<int> > win(){
    vector<vector<int> > ans;
    vector<int> slash, bslash;
    for(int i = 0; i < 5; i++){
      if(state[i][i] != -1) slash.push_back(state[i][i]);
      if(state[i][4-i] != -1) bslash.push_back(state[i][4-i]);
      vector<int> row, col;
      for(int j = 0; j < 5; j++){
        if(state[i][j] != -1)
          row.push_back(state[i][j]);
        if(state[j][i] != -1)
          col.push_back(state[j][i]);
      }
      if(row.size() == 5)
        ans.push_back(row);
      if(col.size() == 5)
        ans.push_back(col); 
    }
    if(slash.size() == 5)
      ans.push_back(slash);
    if(bslash.size() == 5)
      ans.push_back(bslash);
    return ans;
  }

  string winner(vector <string> card, vector <string> calls) {
    car = "BINGO";
    memset(state, -1, sizeof(state));
    for(int i = 1; i < card.size(); i++){
      stringstream ss(card[i]);
      for(int j = 1; j <= 5; j++){
        if(!(i == 3 && j == 3))
          ss >> mycard[i - 1][j - 1];
        else{
          char tmp;
          ss >> tmp;
        }
      }
    }    
    mycard[2][2] = 100;
    state[2][2] = calls.size();
    for(int i = 0; i < calls.size() - 1; i++){
      int pos = position(calls[i][0]);
      stringstream ss(calls[i].substr(1));
      int num;
      ss >> num;
      for(int j = 0; j < 5; j++)
        if(mycard[j][pos] == num)
          state[j][pos] = i;
      vector<vector<int> > w = win();
      if(w.size()){
        for(int j = 0; j < w.size(); j++)
          sort(w[j].begin(), w[j].end());
        sort(w.begin(), w.end());
        string ans = "";
        for(int j = 0; j < 5; j++)
          if(w[0][j] < calls.size()){
            if(j)ans += ",";
            ans += calls[w[0][j]];
          } 
        return ans;
      }
    }   
    return "YOU LOSE";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Bingo *obj;
	string answer;
	obj = new Bingo();
	clock_t startTime = clock();
	answer = obj->winner(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"  B  I  N  G  O"," 12 22 33 55 66","  9 23 34 52 72","  1 24  F 59 71","  4 16 40 48 61","  3 18 41 49 63"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"B12","B3","I16","N40","B2","O70","B1","B9","O71","B4","B7","B11","O68","BINGO"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "B12,B3,B1,B9,B4";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"  B  I  N  G  O"," 12 22 33 55 66","  9 23 34 52 72","  1 24  F 59 71","  4 16 40 48 61","  3 18 41 49 63"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"B12","B3","I16","N40","B2","O70","B1","B9","BINGO"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "YOU LOSE";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"  B  I  N  G  O"," 12 22 33 55 66","  9 23 34 52 72","  1 24  F 59 71","  4 16 40 48 61","  3 18 41 49 63"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"O63","G48","I23","B9","B1","B4","B3","B7","B12","G49","BINGO"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "O63,G48,I23,B12";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
