#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef long long int Number;
class FoxAndMp3 {
public:
  set<string> ans;
  set<string>::iterator it;
  Number toInt(string &cad){
    stringstream ss(cad);
    Number tmp;
    ss >> tmp;
    return tmp;
  }
  vector <string> playList(int n) {
    ans.insert("1");
    ans.insert("2");
    ans.insert("3");
    ans.insert("4");
    ans.insert("5");
    ans.insert("6");
    ans.insert("7");
    ans.insert("8");
    ans.insert("9");
    while(true){
      set<string> tmp, tmp3;
      for(it = ans.begin(); it != ans.end(); it++){
        string act = *it;
        if(toInt(act) <= Number(n))
          tmp.insert(act); 
        for(Number end = 0; end <= 9; end++){
          
          string tmp2 = act;
          tmp2.push_back('0' + end);
          if(toInt(tmp2) <= Number(n))
            tmp.insert(tmp2);
        }
      }
      int size = min((int)tmp.size(), 50);   
      it = tmp.begin();
      for(int i = 0; i < size; i++, it++)
        tmp3.insert(*it);
      if(ans == tmp3)
        break;
      ans = tmp3;
    }
    vector<string> sol;
    for(it = ans.begin(); it != ans.end(); it++)
      sol.push_back((*it) + ".mp3");
    return sol;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	FoxAndMp3 *obj;
	vector <string> answer;
	obj = new FoxAndMp3();
	clock_t startTime = clock();
	answer = obj->playList(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	p0 = 3;
	string t1[] = {"1.mp3","2.mp3","3.mp3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	string t1[] = {"1.mp3","10.mp3","2.mp3","3.mp3","4.mp3","5.mp3","6.mp3","7.mp3","8.mp3","9.mp3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 16;
	string t1[] = {"1.mp3","10.mp3","11.mp3","12.mp3","13.mp3","14.mp3","15.mp3","16.mp3","2.mp3","3.mp3","4.mp3","5.mp3","6.mp3","7.mp3","8.mp3","9.mp3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 32;
	string t1[] = {"1.mp3","10.mp3","11.mp3","12.mp3","13.mp3","14.mp3","15.mp3","16.mp3","17.mp3","18.mp3","19.mp3","2.mp3","20.mp3","21.mp3","22.mp3","23.mp3","24.mp3","25.mp3","26.mp3","27.mp3","28.mp3","29.mp3","3.mp3","30.mp3","31.mp3","32.mp3","4.mp3","5.mp3","6.mp3","7.mp3","8.mp3","9.mp3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100000009;
	string t1[] = {"1.mp3","10.mp3","100.mp3","1000.mp3","10000.mp3","100000.mp3","1000000.mp3","10000000.mp3","100000000.mp3","100000001.mp3","100000002.mp3","100000003.mp3","100000004.mp3","100000005.mp3","100000006.mp3","100000007.mp3","100000008.mp3","100000009.mp3","10000001.mp3","10000002.mp3","10000003.mp3","10000004.mp3","10000005.mp3","10000006.mp3","10000007.mp3","10000008.mp3","10000009.mp3","1000001.mp3","10000010.mp3","10000011.mp3","10000012.mp3","10000013.mp3","10000014.mp3","10000015.mp3","10000016.mp3","10000017.mp3","10000018.mp3","10000019.mp3","1000002.mp3","10000020.mp3","10000021.mp3","10000022.mp3","10000023.mp3","10000024.mp3","10000025.mp3","10000026.mp3","10000027.mp3","10000028.mp3","10000029.mp3","1000003.mp3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1;
	string t1[] = {"1.mp3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
