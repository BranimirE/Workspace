#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
using namespace std;


class ThirteenHard {
public:
  vector<int> g[15];
  vector<int> p;
  int n;
  int sum[50];
  int solve(){
    sum[0] = 0;
    int lim = 0;
    for(int i = 1; i < n; i++){
      int u = p[i - 1] , v = p[i];
      
      int dist = g[u][v];
      if(dist != -1){
        sum[i] = dist + sum[i - 1];
        lim = i + 1;
        if(v == (n - 1))
          break;
      }else
        return -1;
    }
    
    for(int i = 1; i < lim; i++)
      for(int j = i; j < lim; j++){
        int value = sum[j] - sum[i - 1];
        if(value % 13 == 0)
          return -1;
      }
    return sum[lim - 1];
  }
  int calcTime(vector <string> city) {
    n = city.size();
    for(int i = 0; i < n; i++)
      for(int j = 0; j < n; j++){
        char c = city[i][j];
        if(c >= 'A' && c <= 'Z')
          g[i].push_back(c - 'A' + 1);
        else if(c >= 'a' && c <= 'z')
          g[i].push_back(c - 'a' + 27);
        else
          g[i].push_back(-1);
      }
    
    for(int i = 0; i < n; i++){
      cout << i << " : ";
      for(int j = 0; j < n; j++)
        cout << g[i][j] << " ";
      cout << endl;
    }
      
    for(int i = 0; i < n; i++)
      p.push_back(i);
    int ans = INT_MAX;

    do{
      int tmp = solve();
      if(tmp != -1)
        ans = min(ans, tmp);
    }while(next_permutation(p.begin() + 1, p.begin() + n));

    return (ans!=INT_MAX)?ans:-1;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ThirteenHard *obj;
	int answer;
	obj = new ThirteenHard();
	clock_t startTime = clock();
	answer = obj->calcTime(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"#AB##","###A#","###C#","####K","#####"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"#Z","Z#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Good#####","#Luck####","##and####","##Have###","####Fun##","#####in##","#####the#","CHALLENGE","##PHASE##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 137;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"###No#####","####Zaphod","#####Just#","######very","####very##","improbable","##########","##########","##########","##########"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 103;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"#B#C##T#M","##K######","########A","####R####","#####U###","########C","#######H#","########S","#########"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 47;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
