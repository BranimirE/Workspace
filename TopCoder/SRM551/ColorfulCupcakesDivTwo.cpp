#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define MOD 1000000007LL
using namespace std;

typedef long long int Number;
class ColorfulCupcakesDivTwo {
public:
  Number dp[3][51][51][51][3];
  
  Number solve(int act, int A, int B, int C, int ini){
    if(A + B + C == 1){
      if(A) return Number(ini != 0 && act != 0);
      if(B) return Number(ini != 1 && act != 1);
      if(C) return Number(ini != 2 && act != 2);
    }
    Number &ans = dp[act][A][B][C][ini];
    if(ans != -1) return ans;
    ans = 0;
    if(act == 0){
      if(B) ans = (ans + solve(1, A, B - 1, C, ini)) % MOD;
      if(C) ans = (ans + solve(2, A, B, C - 1, ini)) % MOD;
    }
    if(act == 1){
      if(A) ans = (ans + solve(0, A - 1, B, C, ini)) % MOD;
      if(C) ans = (ans + solve(2, A, B, C - 1, ini)) % MOD;
    }
    if(act == 2){
      if(A) ans = (ans + solve(0, A - 1, B, C, ini)) % MOD;
      if(B) ans = (ans + solve(1, A, B - 1, C, ini)) % MOD;
    }
    return ans;
  }
  int countArrangements(string cupcakes) {
    int A = 0, B = 0, C = 0;
    for(int i = 0; i < cupcakes.size(); i++){
      if(cupcakes[i] == 'A') A++;
      if(cupcakes[i] == 'B') B++;
      if(cupcakes[i] == 'C') C++;
    }
    Number ans = 0;
    memset(dp, -1, sizeof(dp));
    if(A) ans = (ans + solve(0, A - 1, B, C, 0)) % MOD;
    if(B) ans = (ans + solve(1, A, B - 1, C, 1)) % MOD;
    if(C) ans = (ans + solve(2, A, B, C - 1, 2)) % MOD;
    return ans;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ColorfulCupcakesDivTwo *obj;
	int answer;
	obj = new ColorfulCupcakesDivTwo();
	clock_t startTime = clock();
	answer = obj->countArrangements(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "ABAB";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ABABA";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABC";
	p1 = 6;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ABABABABABABABABABABABABABABABABABABABABABABABABAB";
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "BCBABBACBABABCCCCCAABBAACBBBBCBCAAA";
	p1 = 741380640;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
